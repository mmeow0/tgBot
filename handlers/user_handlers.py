from aiogram import types
from aiogram_calendar import SimpleCalendar, get_user_locale, SimpleCalendarCallback
from aiogram.filters.callback_data import CallbackData
import logging
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from dateutil.relativedelta import relativedelta
from datetime import datetime, timedelta
from config import ADMIN_ID
from handlers.admin_handlers import CarClass
from handlers.messages import SHOW_FLEET_COMMAND

logger = logging.getLogger(__name__)

class SelectDatesStates(StatesGroup):
    waiting_car_id = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()

class UserHandlers:
    def __init__(self, db, bot):
        self.db = db
        self.bot = bot

    async def show_fleet(self, callback_query: types.CallbackQuery):
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        kb = [
            [
                types.InlineKeyboardButton(text="–≠–∫–æ–Ω–æ–º", callback_data="car_class_econom"),
                types.InlineKeyboardButton(text="–ö–æ–º—Ñ–æ—Ä—Ç", callback_data="car_class_comfort"),
                types.InlineKeyboardButton(text="–ö–æ–º—Ñ–æ—Ä—Ç +", callback_data="car_class_business"),
            ],
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        await callback_query.message.answer("üöó –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)

    def construct_keyboard(self, length: int, page: int, selected_class: str) -> types.InlineKeyboardMarkup:
        kb = {'inline_keyboard': []}
        buttons = []

        if page > 1:
            buttons.append({'text': '<-', 'callback_data': f'page:{page-1}:{selected_class}'})

        buttons.append({'text': f'{page}/{length}', 'callback_data': 'none'})

        if page < length:
            buttons.append({'text': '->', 'callback_data': f'page:{page+1}:{selected_class}'})

        kb['inline_keyboard'].append(buttons)
        kb['inline_keyboard'].append([{'text': '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∞', 'callback_data': SHOW_FLEET_COMMAND}])
        kb['inline_keyboard'].append([{'text': '–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã', 'callback_data': 'select_dates'}])
        return kb

    async def show_cars_by_class(self, callback_query: types.CallbackQuery, state: FSMContext):
        car_class_map = {
            "car_class_econom": CarClass.ECONOM,
            "car_class_comfort": CarClass.COMFORT,
            "car_class_business": CarClass.BUSINESS,
        }

        selected_class = callback_query.data
        class_name = car_class_map.get(selected_class)

        cars = await self.db.get_cars_by_class(class_name)
        if len(cars) > 0:
            car = cars[0]
            await callback_query.message.answer_photo(
                photo=car['photos'][0],
                caption=f"{car['brand']} {car['model']} {car['year']} –æ—Ç {car['price']}—Ä./–¥–µ–Ω—å",
                reply_markup=self.construct_keyboard(len(cars), 1, selected_class)
            )
            await state.update_data(car_id=car['id'])
            await callback_query.message.delete()
        else:
            await callback_query.message.answer(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∫–ª–∞—Å—Å–∞ {class_name}.")

    async def page(self, callback_query: types.CallbackQuery, state: FSMContext):
        page = int(callback_query.data.split(':')[1])
        selected_class = callback_query.data.split(':')[2]
        
        car_class_map = {
            "car_class_econom": CarClass.ECONOM,
            "car_class_comfort": CarClass.COMFORT,
            "car_class_business": CarClass.BUSINESS,
        }

        class_name = car_class_map.get(selected_class)
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –∫–ª–∞—Å—Å—É
        cars = await self.db.get_cars_by_class(class_name)
        car = cars[page - 1]
        file = types.InputMediaPhoto(media=car['photos'][0], caption=f"{car['brand']} {car['model']} {car['year']} –æ—Ç {car['price']}—Ä./–¥–µ–Ω—å")
        await state.update_data(car_id=car['id'])
        await callback_query.message.edit_media(
            file,
            reply_markup=self.construct_keyboard(len(cars), page, selected_class)
        )

    async def start_date_selection(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        calendar = SimpleCalendar(locale=await get_user_locale(callback_query.from_user))
        calendar.set_dates_range(datetime.today(), (datetime.today() + relativedelta(months=6)))
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã:", reply_markup=await calendar.start_calendar())
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
        await state.set_state(SelectDatesStates.waiting_for_start_date)

    async def nav_cal_handler_date(self, message: types.Message):
        calendar = SimpleCalendar(
            locale=await get_user_locale(message.from_user), show_alerts=True
        )
        calendar.set_dates_range(datetime.today(), (datetime.today() + relativedelta(months=6)))
        await message.answer(
            "Calendar opened on feb 2023. Please select a date: ",
            reply_markup=await calendar.start_calendar(year=2023, month=2)
        )

    async def process_date_selection(self, callback_query: types.CallbackQuery, state: FSMContext, callback_data: CallbackData):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
        calendar = SimpleCalendar(
        locale=await get_user_locale(callback_query.from_user), show_alerts=True
    )
        calendar.set_dates_range(datetime.today(), (datetime.today() + relativedelta(months=6)))
        selected, date = await calendar.process_selection(callback_query, callback_data)
        if selected:
               # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(start_date=date)
            reply_markup = await SimpleCalendar(locale=await get_user_locale(callback_query.from_user)).start_calendar()
            await callback_query.message.edit_text(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: {date.strftime('%d.%m.%Y')}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã", reply_markup=reply_markup)

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            await state.set_state(SelectDatesStates.waiting_for_end_date)

    async def get_available_dates(self, car_id: int):
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã
        busy_periods = await self.get_busy_dates(car_id)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π)
        today = datetime.today().date()
        available_dates = []
        
        for i in range(30):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π
            check_date = today + timedelta(days=i)
            is_available = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–Ω—è—Ç—ã–µ –ø–µ—Ä–∏–æ–¥—ã, –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π
            for start, end in busy_periods:
                if start <= check_date <= end:
                    is_available = False
                    break
            
            if is_available:
                available_dates.append(check_date.strftime('%d.%m.%Y'))

        return available_dates
    
    async def process_end_date_selection(self, callback_query: types.CallbackQuery, state: FSMContext, callback_data: CallbackData):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        calendar = SimpleCalendar(
            locale=await get_user_locale(callback_query.from_user), show_alerts=True
        )
        selected, end_date = await calendar.process_selection(callback_query, callback_data)

        if selected:
            user_data = await state.get_data()
            start_date = user_data.get("start_date")
            car_id = user_data.get("car_id")  # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

            if start_date and car_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                available = await self.db.is_car_available(car_id, start_date, end_date)
                if not available:
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç—ã–µ –¥–∞—Ç—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                    busy_periods = await self.db.get_busy_dates(car_id)
                    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                        [types.InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="select_dates")],
                        [types.InlineKeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", url=f"tg://user?id={ADMIN_ID}")]
                    ])
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
                    busy_periods_str = "\n".join(f"{start.strftime('%d.%m.%Y')}-{end.strftime('%d.%m.%Y')}" for start, end in busy_periods)
                    await callback_query.message.edit_text(f"–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}. "
                                                        f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å –∑–∞–Ω—è—Ç –Ω–∞ —ç—Ç–∏ –¥–∞—Ç—ã: \n{busy_periods_str}.", reply_markup=keyboard)
                    return
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                car_info = await self.db.get_car_by_id(car_id)
                if car_info:
                    car_details = f"{car_info['brand']} {car_info['model']} ({car_info['car_class']})"
                else:
                    car_details = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"

                await callback_query.message.edit_text(f"–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã: {start_date.strftime('%d.%m.%Y')}-{end_date.strftime('%d.%m.%Y')} –¥–ª—è {car_details}.\n–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Ä–µ–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

                kb = [
                    [
                        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"confirm_booking:{callback_query.from_user.id}:{car_id}:{start_date.strftime('%d.%m.%Y')}:{end_date.strftime('%d.%m.%Y')}")
                    ],
                ]
                confirm_keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await self.bot.send_message(
                    ADMIN_ID,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} (ID: {callback_query.from_user.id}, –ù–∏–∫–Ω–µ–π–º: @{callback_query.from_user.username}) "
                    f"—Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Ä–µ–Ω–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_details} (ID: {car_id}) —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}.\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=confirm_keyboard
                )
            else:
                await callback_query.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ.")

    async def available_cars(self, callback_query: types.CallbackQuery):
        cars = await self.db.get_all_cars()
        if cars:
            car_list = "\n".join([f"{car['brand']} {car['model']} (–ö–ª–∞—Å—Å: {car['car_class']})" for car in cars])
            await callback_query.message.reply(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:\n{car_list}')
        else:
            await callback_query.message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")

    async def handle_show_rental_terms(self, callback_query: types.CallbackQuery):
        rental_terms = (
                "üè¢ **–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã:**\n"
                "1. –í–∞–º **23-55 –ª–µ—Ç**\n"
                "2. –£ –≤–∞—Å –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ: **–†–§, –ë–µ–ª–∞—Ä—É—Å—å, –ö–∏—Ä–≥–∏–∑–∏—è**\n"
                "3. –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ **–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –í**\n"
                "4. –í—ã ‚Äî **–≤–µ–∂–ª–∏–≤—ã–π –∏ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π**\n"
                "5. –í–∞—à –æ–ø—ã—Ç –≤–æ–∂–¥–µ–Ω–∏—è ‚Äî **–Ω–µ –º–µ–Ω–µ–µ 5 –ª–µ—Ç**\n"
                "6. –í—ã –≥–æ—Ç–æ–≤—ã –∫ **–¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É**\n\n"
                "‚úçÔ∏è **–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –∑–∞—è–≤–∫—É**\n"
                "–ú—ã –æ–¥–æ–±—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –∑–∞ **1 –¥–µ–Ω—å**\n\n"
                "üìú **–ó–∞–∫–ª—é—á–∏–º –¥–æ–≥–æ–≤–æ—Ä**\n"
                "–í—ã –ø—Ä–∏—Å—Ç—É–ø–∏—Ç–µ –∫ **—Ä–∞–±–æ—Ç–µ**."
            )

        await callback_query.message.answer(rental_terms, parse_mode='Markdown')

    async def handle_show_contacts(self, callback_query: types.CallbackQuery):
        contact_info = (
            "üìû **–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏:**\n"
            "üè¢ **–ê–¥—Ä–µ—Å:**\n"
            "–≥. –ë–∞–ª–∞—à–∏—Ö–∞, –º–∫—Ä. –ö—É—á–∏–Ω–æ, —É–ª. –Æ–∂–Ω–∞—è –¥.1, –ø–æ–º. 24\n\n"
            "üïí **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:**\n"
            "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω–æ —Å **8:00 –¥–æ 20:00**\n\n"
            "üì± **–¢–µ–ª–µ—Ñ–æ–Ω—ã:**\n"
            "üìû +7 (910) 004-50-09\n"
            "üìû +7 (495) 215-04-84\n"
            "üìû +7 (495) 374-91-49\n\n"
            "‚úâÔ∏è **Email:**\n"
            "sprint-taxi01@mail.ru"
        )

        await callback_query.message.answer(contact_info, parse_mode='Markdown')

from aiogram import types
from aiogram_calendar import SimpleCalendar, get_user_locale, SimpleCalendarCallback
from aiogram.filters.callback_data import CallbackData
import logging
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from datetime import datetime
from handlers.admin_handlers import CarClass

logger = logging.getLogger(__name__)
ADMIN_CHAT_ID = 00000  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Å—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

class SelectDatesStates(StatesGroup):
    waiting_car_id = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()

class UserHandlers:
    def __init__(self, db, bot):
        self.db = db
        self.bot = bot

    async def show_fleet(self, callback_query: types.CallbackQuery):
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–ª–∞—Å—Å–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        kb = [
            [
                types.InlineKeyboardButton(text="–≠–∫–æ–Ω–æ–º", callback_data="car_class_econom"),
                types.InlineKeyboardButton(text="–ö–æ–º—Ñ–æ—Ä—Ç", callback_data="car_class_comfort"),
                types.InlineKeyboardButton(text="–ö–æ–º—Ñ–æ—Ä—Ç +", callback_data="car_class_business"),
            ],
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)
        await callback_query.message.answer("üöó –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:", reply_markup=keyboard)

    def construct_keyboard(self, length: int, page: int, selected_class: str) -> types.InlineKeyboardMarkup:
        kb = {'inline_keyboard': []}
        buttons = []

        if page > 1:
            buttons.append({'text': '<-', 'callback_data': f'page:{page-1}:{selected_class}'})

        buttons.append({'text': f'{page}/{length}', 'callback_data': 'none'})

        if page < length:
            buttons.append({'text': '->', 'callback_data': f'page:{page+1}:{selected_class}'})

        kb['inline_keyboard'].append(buttons)
        kb['inline_keyboard'].append([{'text': '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∫–ª–∞—Å—Å–∞', 'callback_data': 'show_fleet'}])
        kb['inline_keyboard'].append([{'text': '–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—ã', 'callback_data': 'select_dates'}])  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç

        return kb

    async def show_cars_by_class(self, callback_query: types.CallbackQuery, state: FSMContext):
        car_class_map = {
            "car_class_econom": CarClass.ECONOM,
            "car_class_comfort": CarClass.COMFORT,
            "car_class_business": CarClass.BUSINESS,
        }

        selected_class = callback_query.data
        class_name = car_class_map.get(selected_class)

        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –∫–ª–∞—Å—Å—É
        cars = await self.db.get_cars_by_class(class_name)
        if len(cars) > 0:
            car = cars[0]
            await callback_query.message.answer_photo(
                photo=car['photos'][0],
                caption=f"{car['brand']} {car['model']} {car['year']} –æ—Ç {car['price']}—Ä./–¥–µ–Ω—å",
                reply_markup=self.construct_keyboard(len(cars), 1, selected_class)
            )
            await state.update_data(car_id=car['id'])
        else:
            await callback_query.message.answer(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∫–ª–∞—Å—Å–∞ {class_name}.")

    async def page(self, callback_query: types.CallbackQuery, state: FSMContext):
        page = int(callback_query.data.split(':')[1])
        selected_class = callback_query.data.split(':')[2]
        
        car_class_map = {
            "car_class_econom": CarClass.ECONOM,
            "car_class_comfort": CarClass.COMFORT,
            "car_class_business": CarClass.BUSINESS,
        }

        class_name = car_class_map.get(selected_class)
        # –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –ø–æ –∫–ª–∞—Å—Å—É
        cars = await self.db.get_cars_by_class(class_name)
        car = cars[page - 1]
        file = types.InputMediaPhoto(media=car['photos'][0], caption=f"{car['brand']} {car['model']} {car['year']} –æ—Ç {car['price']}—Ä./–¥–µ–Ω—å")
        await state.update_data(car_id=car['id'])
        await callback_query.message.edit_media(
            file,
            reply_markup=self.construct_keyboard(len(cars), page, selected_class)
        )

    async def rent_car(self, callback_query: types.CallbackQuery):
        command_parts = callback_query.message.text.split()
        
        if len(command_parts) < 4:
            await callback_query.message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ –¥–∞—Ç—ã (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü) –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /rent_car <ID> <–Ω–∞—á–∞–ª–æ> <–∫–æ–Ω–µ—Ü>.")
            return
        
        try:
            car_id = int(command_parts[1])
            start_time = command_parts[2]
            end_time = command_parts[3]

            available = await self.db.is_car_available(car_id, start_time, end_time)
            if not available:
                await callback_query.message.reply("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
                return

            await self.db.rent_car(car_id, callback_query.message.from_user.id, start_time, end_time)
            await callback_query.message.reply("–ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.")
        except ValueError:
            await callback_query.message.reply("ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        except Exception as e:
            await callback_query.message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä–µ–Ω–¥–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")

    async def start_date_selection(self, callback_query: types.CallbackQuery, state: FSMContext):
        """–ó–∞–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        reply_markup=await SimpleCalendar(locale=await get_user_locale(callback_query.from_user)).start_calendar()
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã:", reply_markup=reply_markup)
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
        await state.set_state(SelectDatesStates.waiting_for_start_date)

    async def nav_cal_handler_date(self, message: types.Message):
        calendar = SimpleCalendar(
            locale=await get_user_locale(message.from_user), show_alerts=True
        )
        calendar.set_dates_range(datetime(2022, 1, 1), datetime(2025, 12, 31))
        await message.answer(
            "Calendar opened on feb 2023. Please select a date: ",
            reply_markup=await calendar.start_calendar(year=2023, month=2)
        )

    async def process_date_selection(self, callback_query: types.CallbackQuery, state: FSMContext, callback_data: CallbackData):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
        calendar = SimpleCalendar(
        locale=await get_user_locale(callback_query.from_user), show_alerts=True
    )
        calendar.set_dates_range(datetime(2022, 1, 1), datetime(2025, 12, 31))
        selected, date = await calendar.process_selection(callback_query, callback_data)
        if selected:
               # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(start_date=date)
            reply_markup = await SimpleCalendar(locale=await get_user_locale(callback_query.from_user)).start_calendar()
            await callback_query.message.answer(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: {date.strftime('%Y-%m-%d')}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã", reply_markup=reply_markup)

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è
            await state.set_state(SelectDatesStates.waiting_for_end_date)

    async def process_end_date_selection(self, callback_query: types.CallbackQuery, state: FSMContext, callback_data: CallbackData):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã —Å –ø–æ–º–æ—â—å—é –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ callback_data
        calendar = SimpleCalendar(
            locale=await get_user_locale(callback_query.from_user), show_alerts=True
        )
        calendar.set_dates_range(datetime(2022, 1, 1), datetime(2025, 12, 31))
        selected, end_date = await calendar.process_selection(callback_query, callback_data)

        if selected:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_data = await state.get_data()
            start_date = user_data.get("start_date")
            car_id = user_data.get("car_id")  # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

            if start_date and car_id:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                car_info = await self.db.get_car_by_id(car_id)  # –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è –ø–æ ID
                if car_info:
                    car_details = f"{car_info['brand']} {car_info['model']} ({car_info['car_class']})"
                else:
                    car_details = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å"

                await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã: {end_date.strftime('%Y-%m-%d')}")
                
                # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Ä–µ–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
                await callback_query.message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Ä–µ–Ω–¥—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")

                kb = [
                        [
                            types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"confirm_booking:{callback_query.from_user.id}:{car_id}:{start_date.strftime('%Y-%m-%d')}:{end_date.strftime('%Y-%m-%d')}")
                        ],
                    ]
                confirm_keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                await self.bot.send_message(
                    ADMIN_CHAT_ID,
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.full_name} (ID: {callback_query.from_user.id}, –ù–∏–∫–Ω–µ–π–º: @{callback_query.from_user.username}) "
                    f"—Å–¥–µ–ª–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞—Ä–µ–Ω–¥—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è {car_details} (ID: {car_id}) —Å {start_date.strftime('%Y-%m-%d')} –ø–æ {end_date.strftime('%Y-%m-%d')}.\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.", reply_markup=confirm_keyboard
                )
            else:
                await callback_query.message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ.")


    async def available_cars(self, callback_query: types.CallbackQuery):
        cars = await self.db.get_all_cars()
        if cars:
            car_list = "\n".join([f"{car['brand']} {car['model']} (–ö–ª–∞—Å—Å: {car['car_class']})" for car in cars])
            await callback_query.message.reply(f'–î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏:\n{car_list}')
        else:
            await callback_query.message.reply("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
